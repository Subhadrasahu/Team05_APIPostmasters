{
	"info": {
		"_postman_id": "23aba0b2-0910-4283-9c12-49410d8e7ab0",
		"name": "API_HACKATHON_FINAL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46759015",
		"_collection_link": "https://teampostmasters.postman.co/workspace/a5c121a1-fa84-4511-84b4-41c45957440d/collection/46757342-23aba0b2-0910-4283-9c12-49410d8e7ab0?action=share&source=collection_link&creator=46759015"
	},
	"item": [
		{
			"name": "DIETICIAN-SRAVANI",
			"item": [
				{
					"name": "Dietician-Sr-DataDriven",
					"item": [
						{
							"name": "Get All Dietician",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse expected and actual status codes",
											"const expectedStatus = parseInt(pm.iterationData.get(\"expected_status\"));",
											"const actualStatus = pm.response.code;",
											"",
											"// âœ… Validate the actual status code",
											"pm.test(`Status code is ${expectedStatus}`, function () {",
											"    pm.expect(actualStatus).to.eql(expectedStatus);",
											"});",
											"",
											"// âœ… Validate that Content-Type is application/json",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// ðŸ”’ Only run the following checks if status is 201 (resource created)",
											"if (expectedStatus === 201) {",
											"    const jsonData = pm.response.json();",
											"",
											"    // âœ… Auto-generated field checks",
											"    pm.test(\"Login ID is generated\", function () {",
											"        pm.expect(jsonData.id).to.exist;",
											"       // pm.expect(jsonData.id).to.not.be.empty;",
											"         pm.expect(jsonData.id).to.be.a(\"number\");",
											"    });",
											"",
											"    pm.test(\"Password is generated\", function () {",
											"        pm.expect(jsonData.loginPassword).to.exist;",
											"        pm.expect(jsonData.loginPassword).to.not.be.empty;",
											"    });",
											"",
											"    pm.test(\"Auto-generated fields are not null\", function () {",
											"        pm.expect(jsonData.loginPassword).to.not.be.null;",
											"        pm.expect(jsonData.id).to.not.be.null;",
											"    });",
											"",
											"    // âœ… Response matches request body data",
											"    pm.test(\"Response fields match request data\", function () {",
											"        pm.expect(jsonData.Email).to.eql(pm.iterationData.get(\"Email\"));",
											"        pm.expect(jsonData.Firstname).to.eql(pm.iterationData.get(\"Firstname\"));",
											"        pm.expect(jsonData.Lastname).to.eql(pm.iterationData.get(\"Lastname\"));",
											"        pm.expect(jsonData.DateOfBirth).to.eql(pm.iterationData.get(\"DateOfBirth\"));",
											"",
											"        pm.expect(jsonData.ContactNumber).to.eql(pm.iterationData.get(\"ContactNumber\").toString());",
											"        pm.expect(jsonData.Education).to.eql(pm.iterationData.get(\"Education\"));",
											"        pm.expect(jsonData.HospitalName).to.eql(pm.iterationData.get(\"HospitalName\"));",
											"        pm.expect(jsonData.HospitalStreet).to.eql(pm.iterationData.get(\"HospitalStreet\"));",
											"        pm.expect(jsonData.HospitalCity).to.eql(pm.iterationData.get(\"HospitalCity\"));",
											"        pm.expect(jsonData.HospitalPincode).to.eql(pm.iterationData.get(\"HospitalPincode\").toString());",
											"    });",
											"",
											"    // Store created id in environment variable for cross-collection use",
											"pm.environment.set(\"dieticianId\", jsonData.id);",
											"pm.test(\"Created dietician ID is saved\", function () {",
											"    pm.expect(pm.environment.get(\"dieticianId\")).to.eql(jsonData.id);",
											"});",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "user login",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNTA1QGdtYWlsLmNvbSIsImlhdCI6MTc1MjY0MTgzMywiZXhwIjoxNzUyNjcwNjMzfQ.-oSn3jpIP-GNBKC7A8r8rXQdfBLfx_Vxg8ju6u-Ik9eWXLg3juaPufSxKnY51JPd6prrRbK3hgkUGM_74xj2Gg\n",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userLoginEmail\": \"Team505@gmail.com\",\n  \"password\": \"test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Dietician-Sr",
					"item": [
						{
							"name": "Deldietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Dietician deleted successfully\", function () {",
											"    pm.expect(jsonData.message).to.include(\"Deleted dietician successfully\");",
											"   // pm.expect(jsonData.data.id).to.eql(parseInt(pm.environment.get(\"dieticianId\")));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/dietician/{{dieticianId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician",
										"{{dieticianId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid/nonexisting id - delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician/{{invalidDid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician",
										"{{invalidDid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid endpoint - delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for invalid URL\", function () {",
											"    pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message returned\", function () {",
											"    pm.expect(jsonData.error).to.include(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/dieticians/{{invalidDid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dieticians",
										"{{invalidDid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Auth - delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 - Unauthorized\", function () {",
											"    pm.expect(pm.response.code).to.eql(401);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dietician/{{dieticianId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician",
										"{{dieticianId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Invalid auth -Sr- crDietician",
					"item": [
						{
							"name": "Invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for invalid URL\", function () {",
											"    pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message returned\", function () {",
											"    pm.expect(jsonData.error).to.include(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 - Unauthorized\", function () {",
											"    pm.expect(pm.response.code).to.eql(401);",
											"});",
											"",
											"pm.test(\"Response has expected error structure\", function () {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Check all key fields exist",
											"    pm.expect(jsonData).to.have.property(\"timestamp\");",
											"    pm.expect(jsonData).to.have.property(\"status\", 401);",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"});",
											"",
											"pm.test(\"Message is about unexpected error (case-insensitive)\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.toLowerCase()).to.include(\"unexpected error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Practice",
					"item": [
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "Invallid lastname - dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.iterationData.get(\"testname\") !== \"invalidlastname\") {",
											"   // postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid firstname - dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.iterationData.get(\"testname\") !== \"invalidfirstname\") {",
											"   // pm.execution.setNextRequest(null); // Skip if not this test",
											"}",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid email - dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// if (pm.iterationData.get(\"testname\") !== \"invalidemail\") {",
											"//     console.log(\"Skipping: not invalidemail\");",
											"//     pm.execution.setNextRequest(null);  ",
											"// }  ",
											"   ",
											"//    pm.test(\"Status code is 400\", function () {",
											"//     pm.response.to.have.status(400);",
											"// });",
											"",
											"",
											"if (pm.iterationData.get(\"testname\") === \"invalidemail\") {",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"} else {",
											"    console.log(\"Skipping test: not invalidemail\");",
											"    // No pm.test() runs, so nothing to fail or pass",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid pincode - dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.iterationData.get(\"testname\") !== \"invalidpin\") {",
											"    console.log(\"Skipping: not invalidpin\");",
											"    //pm.execution.setNextRequest(null);  ",
											"}  ",
											"   ",
											"   pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid contactnum - dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.iterationData.get(\"testname\") !== \"invalidcontact\") {",
											"    console.log(\"Skipping: not invalidcontact\");",
											"   // pm.execution.setNextRequest(null);  ",
											"}  ",
											"   ",
											"   pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing contact - dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.iterationData.get(\"testname\") !== \"missingcontact\") {",
											"    console.log(\"Skipping: not missingcontact\");",
											"   // pm.execution.setNextRequest(null);  ",
											"}  ",
											"   ",
											"   pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing dob - dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.iterationData.get(\"testname\") !== \"missingdob\") {",
											"    console.log(\"Skipping: not missingdob\");",
											"   // pm.execution.setNextRequest(null);  ",
											"}  ",
											"   ",
											"   pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dietician",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Morbidity - Subasini",
			"item": [
				{
					"name": "Morbidity",
					"item": [
						{
							"name": "Dietician - Retrieve All Morbidities",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNTA1QGdtYWlsLmNvbSIsImlhdCI6MTc1Mjc4ODcwNywiZXhwIjoxNzUyODE3NTA3fQ.ipMfeb7NyvIrASKxnU6oH0AfvDvcHmVztnU1y3xKf253sgW4gOUZbXZ7Pu6R3ZUkYnm8rUyuTionOkJy2bu3Og",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/morbidity",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve All Morbidities",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 18:54:28 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=cqmf5y4U7OlBv5vdUBvuaxo7gVk9ufKFDKXrxnr70K8%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752519268\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=cqmf5y4U7OlBv5vdUBvuaxo7gVk9ufKFDKXrxnr70K8%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752519268\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 4,\n        \"morbidityTestId\": \"DIA_HBA1C\",\n        \"morbidityNameRegex\": \"(.*)HbA[1I]c(.*)|(.*)H(.*)P(.*)L(.*)C(.*)\",\n        \"morbidityTestName\": \"HbA1c\",\n        \"morbidityTestUnit\": \"%\",\n        \"morbidityMarkerMinVal\": 5.7,\n        \"morbidityMarkerMaxVal\": 6.5\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"Î¼g/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"Î¼IU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
								},
								{
									"name": "Invalid BaseURL",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathons-80f2590665cc.herokuapp.com/dietician/morbidity",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathons-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"morbidity"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Content-Length",
											"value": "548"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "2025-07-14 18:55:43.152072304 +0000 UTC"
										},
										{
											"key": "Server",
											"value": "heroku-router"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>No such app</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
								},
								{
									"name": "Invalid Method",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Allow",
											"value": "POST, GET"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 18:56:40 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=i9V1LZWtDV0ma4fGa87U1nSjWCQzkqCnGNNgPjj%2Ffjo%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752519400\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=i9V1LZWtDV0ma4fGa87U1nSjWCQzkqCnGNNgPjj%2Ffjo%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752519400\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "147"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T18:56:40.945732187\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"message\": \"HTTP method is not supported for this endpoint.\"\n}"
								},
								{
									"name": "Invalid Token",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 18:57:27 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=IcOBQteqqfSHxbqmj1JgaprC4xunonfq%2BeinvjOdn8Q%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752519447\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=IcOBQteqqfSHxbqmj1JgaprC4xunonfq%2BeinvjOdn8Q%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752519447\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T18:57:27.787815982\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								},
								{
									"name": "Invalid Endpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidities",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidities"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 18:58:39 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=Q%2BytmcRId%2BZaGK5mk9Vuh6JFYd3eQeFEjLGnzo8W0pY%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752519518\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=Q%2BytmcRId%2BZaGK5mk9Vuh6JFYd3eQeFEjLGnzo8W0pY%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752519518\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "114"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T18:58:39.020748525\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"message\": \"Endpoint not supported.\"\n}"
								}
							]
						},
						{
							"name": "Dietician - Retrieve All Morbidities by Test Name",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNTA1QGdtYWlsLmNvbSIsImlhdCI6MTc1Mjc4ODcwNywiZXhwIjoxNzUyODE3NTA3fQ.ipMfeb7NyvIrASKxnU6oH0AfvDvcHmVztnU1y3xKf253sgW4gOUZbXZ7Pu6R3ZUkYnm8rUyuTionOkJy2bu3Og",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/morbidity/Average Glucose",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity",
										"Average Glucose"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve By Test Name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average Glucose"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:01:10 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=nKTDeSipjQL4grviUzSzDQIKhJwqAnv3o4g1gGsGwqA%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752519670\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=nKTDeSipjQL4grviUzSzDQIKhJwqAnv3o4g1gGsGwqA%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752519670\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "226"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    }\n]"
								},
								{
									"name": "Invalid Test Name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average123Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average123Glucose"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:01:50 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=lOwEvvSW7Kui5w%2BjftVnz99wC07bGKBQ%2BRyASSZ95EQ%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752519710\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=lOwEvvSW7Kui5w%2BjftVnz99wC07bGKBQ%2BRyASSZ95EQ%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752519710\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "105"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"NOT_FOUND\",\n    \"errorMessage\": \"Morbidity not found with MorbidityTestName : Average123Glucose\"\n}"
								},
								{
									"name": "Invalid BaseURL",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathosn-80f2590665cc.herokuapp.com/dietician/morbidity/Average Glucose",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathosn-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"morbidity",
												"Average Glucose"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Content-Length",
											"value": "548"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "2025-07-14 19:02:48.52083125 +0000 UTC"
										},
										{
											"key": "Server",
											"value": "heroku-router"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>No such app</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
								},
								{
									"name": "Invalid Method",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average Glucose"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Allow",
											"value": "DELETE, GET, PUT"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:03:25 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=2EYzAXw%2FipnBucjYNCnxSb965PsKvZXnjqETlg6UuI4%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752519805\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=2EYzAXw%2FipnBucjYNCnxSb965PsKvZXnjqETlg6UuI4%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752519805\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "147"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T19:03:25.398373627\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"message\": \"HTTP method is not supported for this endpoint.\"\n}"
								},
								{
									"name": "Invalid Endpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidities/Average Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidities",
												"Average Glucose"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:06:48 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=YP8DXCNHTHdeg%2BnLPm%2B3Ya3BCa69v2IzYfjywd60ruQ%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752520008\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=YP8DXCNHTHdeg%2BnLPm%2B3Ya3BCa69v2IzYfjywd60ruQ%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752520008\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "114"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T19:06:48.442231152\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"message\": \"Endpoint not supported.\"\n}"
								},
								{
									"name": "Invalid Token",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average Glucose"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:07:18 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=k8ZspnklJM17jbbThb65ioyDzhl6t5RK94GKTS0xzjg%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752520039\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=k8ZspnklJM17jbbThb65ioyDzhl6t5RK94GKTS0xzjg%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752520039\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T19:07:19.034077363\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								},
								{
									"name": "Null Value with single space",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/ ",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												" "
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:08:01 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=oY3ZaEhiL%2B4vZBOPBMccHo4%2B1jvxPt6ZH3Ef3yLHVY0%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752520081\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=oY3ZaEhiL%2B4vZBOPBMccHo4%2B1jvxPt6ZH3Ef3yLHVY0%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752520081\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "940"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    }\n]"
								},
								{
									"name": "Partial Testname",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/era",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"era"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:09:02 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=mgWki7ACQijt6sRfGRICK9vj9iLxiEtO1n8C535J7mg%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752520142\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=mgWki7ACQijt6sRfGRICK9vj9iLxiEtO1n8C535J7mg%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752520142\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "226"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    }\n]"
								},
								{
									"name": "Special Characters",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/!@!@#",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"!@!@"
											],
											"hash": ""
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:09:46 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=o5UDFYz%2BPyS8hHTyC7lsMHSD%2Bq1BxryIfdMC0OU3Fv0%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752520186\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=o5UDFYz%2BPyS8hHTyC7lsMHSD%2Bq1BxryIfdMC0OU3Fv0%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752520186\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "92"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"NOT_FOUND\",\n    \"errorMessage\": \"Morbidity not found with MorbidityTestName : !@!@\"\n}"
								}
							]
						},
						{
							"name": "Admin - Retrieve All Morbidities",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNTA1QGdtYWlsLmNvbSIsImlhdCI6MTc1Mjc4ODcwNywiZXhwIjoxNzUyODE3NTA3fQ.ipMfeb7NyvIrASKxnU6oH0AfvDvcHmVztnU1y3xKf253sgW4gOUZbXZ7Pu6R3ZUkYnm8rUyuTionOkJy2bu3Og",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/morbidity",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve All Morbidities",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:19:57 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=%2FAdn6QqpbukN7Sky8opxt8IyRdXmh7YSLtqoIsvl7cU%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752509997\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=%2FAdn6QqpbukN7Sky8opxt8IyRdXmh7YSLtqoIsvl7cU%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752509997\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 4,\n        \"morbidityTestId\": \"DIA_HBA1C\",\n        \"morbidityNameRegex\": \"(.*)HbA[1I]c(.*)|(.*)H(.*)P(.*)L(.*)C(.*)\",\n        \"morbidityTestName\": \"HbA1c\",\n        \"morbidityTestUnit\": \"%\",\n        \"morbidityMarkerMinVal\": 5.7,\n        \"morbidityMarkerMaxVal\": 6.5\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"Î¼g/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"Î¼IU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
								},
								{
									"name": "Invalid BaseURL",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathons-80f2590665cc.herokuapp.com/dietician/morbidity",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathons-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"morbidity"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Content-Length",
											"value": "548"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "2025-07-14 16:23:57.343710841 +0000 UTC"
										},
										{
											"key": "Server",
											"value": "heroku-router"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>No such app</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
								},
								{
									"name": "Invalid Method",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Allow",
											"value": "POST, GET"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:24:51 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=KZdVW0O6FTtSti2GBkPQM3bU6oT4bH%2BQcXLOQMVtVLQ%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752510291\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=KZdVW0O6FTtSti2GBkPQM3bU6oT4bH%2BQcXLOQMVtVLQ%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752510291\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "147"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T16:24:51.373254623\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"message\": \"HTTP method is not supported for this endpoint.\"\n}"
								},
								{
									"name": "Invalid Endpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidities",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidities"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:25:52 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=rUwhSUdzxIlCL9fs2Km%2FztEfTzh3M%2Fi7I2jfzpw2M30%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752510353\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=rUwhSUdzxIlCL9fs2Km%2FztEfTzh3M%2Fi7I2jfzpw2M30%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752510353\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "114"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T16:25:53.309395026\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"message\": \"Endpoint not supported.\"\n}"
								},
								{
									"name": "Invalid Token",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:26:39 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=QXNLJsuByfsNfHkdenmFh3Qq3xdDCqMzdkauHVUldP0%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752510399\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=QXNLJsuByfsNfHkdenmFh3Qq3xdDCqMzdkauHVUldP0%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752510399\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T16:26:39.935106977\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								}
							]
						},
						{
							"name": "Admin - Retrieve All Morbidities By Test Name",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNTA1QGdtYWlsLmNvbSIsImlhdCI6MTc1Mjc4ODcwNywiZXhwIjoxNzUyODE3NTA3fQ.ipMfeb7NyvIrASKxnU6oH0AfvDvcHmVztnU1y3xKf253sgW4gOUZbXZ7Pu6R3ZUkYnm8rUyuTionOkJy2bu3Og",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/morbidity/Average Glucose",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity",
										"Average Glucose"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve by Test Name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average Glucose"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:32:27 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=g4qIcJCHFQDLjntcBvd2nwBdO9hwHTZjCcb0aclJ6ok%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752510747\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=g4qIcJCHFQDLjntcBvd2nwBdO9hwHTZjCcb0aclJ6ok%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752510747\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "226"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    }\n]"
								},
								{
									"name": "Invalid Test Name",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average Glucose123",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average Glucose123"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:33:58 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=dOU3THehqiwg3YeXd9Oaiw5HUI2PjDAcVJvXF8jZaMA%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752510838\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=dOU3THehqiwg3YeXd9Oaiw5HUI2PjDAcVJvXF8jZaMA%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752510838\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "106"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"NOT_FOUND\",\n    \"errorMessage\": \"Morbidity not found with MorbidityTestName : Average Glucose123\"\n}"
								},
								{
									"name": "Invalid BaseURL",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathons-80f2590665cc.herokuapp.com/dietician/morbidity/T3",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathons-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"morbidity",
												"T3"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Content-Length",
											"value": "548"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "2025-07-14 16:40:04.051529493 +0000 UTC"
										},
										{
											"key": "Server",
											"value": "heroku-router"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>No such app</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
								},
								{
									"name": "Invalid Method",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/T3",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"T3"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Allow",
											"value": "DELETE, GET, PUT"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:41:01 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=8VyvEz1fgoF%2BvErCfFb9QeOkIvk0WSs1mymOSXCPbco%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752511261\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=8VyvEz1fgoF%2BvErCfFb9QeOkIvk0WSs1mymOSXCPbco%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752511261\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "147"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T16:41:01.099976237\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"message\": \"HTTP method is not supported for this endpoint.\"\n}"
								},
								{
									"name": "Invalid Endpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidities/T3",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidities",
												"T3"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:44:29 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=4yFswE9nGb6sD10qt6XfZTxYe4GyJvV3o6V1SBstOf4%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752511469\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=4yFswE9nGb6sD10qt6XfZTxYe4GyJvV3o6V1SBstOf4%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752511469\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "114"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T16:44:29.163307033\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"message\": \"Endpoint not supported.\"\n}"
								},
								{
									"name": "Invalid Token",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/T3",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"T3"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:45:30 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=sRcdReomRYYlfMDB0YlSEF3R97E%2BJqcPKtcXfUx8ROw%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752511530\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=sRcdReomRYYlfMDB0YlSEF3R97E%2BJqcPKtcXfUx8ROw%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752511530\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T16:45:30.599725401\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								},
								{
									"name": "Partial TestName",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:49:21 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=O3we5BL9RlrHK8JDzdBcRA%2F45DjTtB80muqjAkxyf4E%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752511761\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=O3we5BL9RlrHK8JDzdBcRA%2F45DjTtB80muqjAkxyf4E%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752511761\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "226"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    }\n]"
								},
								{
									"name": "Partial TestName",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Glucose"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:50:09 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=MBSql74muicn%2BypZIR1PpOkLE%2BVaq8AoGjv63iyri30%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752511809\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=MBSql74muicn%2BypZIR1PpOkLE%2BVaq8AoGjv63iyri30%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752511809\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "708"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    }\n]"
								},
								{
									"name": "Partial _ era",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/era",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"era"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:51:38 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=6tsOLgeYD5LPq7XeZloNFc71gjhZ3AkosK3NC9Cg8So%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752511898\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=6tsOLgeYD5LPq7XeZloNFc71gjhZ3AkosK3NC9Cg8So%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752511898\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "226"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    }\n]"
								},
								{
									"name": "Special Character in TestName",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/T_@#3",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"T_@"
											],
											"hash": "3"
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 16:54:36 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=EGf6rqyRhcIZUwpVRQkLyYD05zjfd1ADVWGQEgabflQ%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752512076\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=EGf6rqyRhcIZUwpVRQkLyYD05zjfd1ADVWGQEgabflQ%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752512076\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "91"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"NOT_FOUND\",\n    \"errorMessage\": \"Morbidity not found with MorbidityTestName : T_@\"\n}"
								},
								{
									"name": "Null Value with single space",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/ ",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												" "
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 19:10:33 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=rllz4eB8XvAJtxMmR6iLPMzPAZ6TGUgAH6Z7kKDq5EI%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752520233\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=rllz4eB8XvAJtxMmR6iLPMzPAZ6TGUgAH6Z7kKDq5EI%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752520233\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "940"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    }\n]"
								}
							]
						},
						{
							"name": "Retrieve All Morbidity - Scripts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"\r",
											"if (token) {\r",
											"    \r",
											"    pm.request.headers.upsert({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.warn(\"BearerToken is not set in environment!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"First item contains required properties\", function () {\r",
											"    let data = pm.response.json();\r",
											"    if (data.length > 0) {\r",
											"        let item = data[0];\r",
											"        pm.expect(item).to.have.property(\"morbidityId\");\r",
											"        pm.expect(item).to.have.property(\"morbidityTestName\");\r",
											"        pm.expect(item).to.have.property(\"morbidityTestUnit\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"morbidityList\", JSON.stringify(pm.response.json()));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/morbidity",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": [
								{
									"name": "Pre and Post Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNTA1QGdtYWlsLmNvbSIsImlhdCI6MTc1MjY5NDY2MCwiZXhwIjoxNzUyNzIzNDYwfQ.LKbVdfE6bnokUdKkk9jRFHQxHSSV8K7_MMqGpDNUjbLq6dQ_i7fDIdq8uD5TNVi5hFOj5lUuy9ljlyMI7q3RRg",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Base_URL}}/morbidity",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 16 Jul 2025 19:41:03 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=SYiw29tu8aYcFO4A9V%2Bvk7PMAitfbf5fBmTIXpp9iOE%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752694863\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=SYiw29tu8aYcFO4A9V%2Bvk7PMAitfbf5fBmTIXpp9iOE%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752694863\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 4,\n        \"morbidityTestId\": \"DIA_HBA1C\",\n        \"morbidityNameRegex\": \"(.*)HbA[1I]c(.*)|(.*)H(.*)P(.*)L(.*)C(.*)\",\n        \"morbidityTestName\": \"HbA1c\",\n        \"morbidityTestUnit\": \"%\",\n        \"morbidityMarkerMinVal\": 5.7,\n        \"morbidityMarkerMaxVal\": 6.5\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"Î¼g/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"Î¼IU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
								}
							]
						},
						{
							"name": "Retrieve by TestName - Scripts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"BearerToken\");\r",
											"\r",
											"if (token) {\r",
											"    \r",
											"    pm.request.headers.upsert({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.warn(\"BearerToken is not set in environment!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    pm.test(\"Status code is 200 (Success)\", function () {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.test(\"Response is an array\", function () {\r",
											"        pm.expect(data).to.be.an(\"array\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"First item has required properties\", function () {\r",
											"        if (data.length > 0) {\r",
											"            const item = data[0];\r",
											"            pm.expect(item).to.have.property(\"morbidityId\");\r",
											"            pm.expect(item).to.have.property(\"morbidityMarkerMaxVal\");\r",
											"            pm.expect(item).to.have.property(\"morbidityMarkerMinVal\");\r",
											"            pm.expect(item).to.have.property(\"morbidityNameRegex\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestId\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestName\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestUnit\");\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.environment.set(\"morbidityData\", JSON.stringify(data));\r",
											"\r",
											"} else if (pm.response.code === 404) {\r",
											"    pm.test(\"Status code is 404 (Not Found)\", function () {\r",
											"        pm.expect(pm.response.code).to.equal(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Morbidity not found message exists\", function () {\r",
											"        const responseText = pm.response.text().toLowerCase();\r",
											"        pm.expect(responseText.includes(\"not found\")).to.be.true;\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected status code\", function () {\r",
											"        pm.expect.fail(`Expected 200 or 404, but got ${pm.response.code}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/morbidity/Average Glucose",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity",
										"Average Glucose"
									]
								}
							},
							"response": [
								{
									"name": "Valid Testname",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average Glucose"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 16 Jul 2025 19:49:21 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=hbvYf2x5XIFrt7xpsaMTcV1KebDVTyrdH1TD6hHPX5E%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752695361\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=hbvYf2x5XIFrt7xpsaMTcV1KebDVTyrdH1TD6hHPX5E%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752695361\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "226"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    }\n]"
								}
							]
						},
						{
							"name": "Retrieve by Invalid TestName - Scripts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"BearerToken\");\r",
											"\r",
											"if (token) {\r",
											"    \r",
											"    pm.request.headers.upsert({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.warn(\"BearerToken is not set in environment!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    pm.test(\"Status code is 200 (Success)\", function () {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.test(\"Response is an array\", function () {\r",
											"        pm.expect(data).to.be.an(\"array\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"First item has required properties\", function () {\r",
											"        if (data.length > 0) {\r",
											"            const item = data[0];\r",
											"            pm.expect(item).to.have.property(\"morbidityId\");\r",
											"            pm.expect(item).to.have.property(\"morbidityMarkerMaxVal\");\r",
											"            pm.expect(item).to.have.property(\"morbidityMarkerMinVal\");\r",
											"            pm.expect(item).to.have.property(\"morbidityNameRegex\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestId\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestName\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestUnit\");\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.environment.set(\"morbidityData\", JSON.stringify(data));\r",
											"\r",
											"} else if (pm.response.code === 404) {\r",
											"    pm.test(\"Status code is 404 (Not Found)\", function () {\r",
											"        pm.expect(pm.response.code).to.equal(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Morbidity not found message exists\", function () {\r",
											"        const responseText = pm.response.text().toLowerCase();\r",
											"        pm.expect(responseText.includes(\"not found\")).to.be.true;\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected status code\", function () {\r",
											"        pm.expect.fail(`Expected 200 or 404, but got ${pm.response.code}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/morbidity/Average_Glucose",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity",
										"Average_Glucose"
									]
								}
							},
							"response": [
								{
									"name": "Invalid Testname",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base_URL}}/morbidity/Average_Glucose",
											"host": [
												"{{Base_URL}}"
											],
											"path": [
												"morbidity",
												"Average_Glucose"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 16 Jul 2025 19:50:42 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=ApRHjzRP9tHLhpdY%2FrrLwZPCvuGTc1Of1pVN8fL5D3I%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752695442\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=ApRHjzRP9tHLhpdY%2FrrLwZPCvuGTc1Of1pVN8fL5D3I%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752695442\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "103"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"NOT_FOUND\",\n    \"errorMessage\": \"Morbidity not found with MorbidityTestName : Average_Glucose\"\n}"
								}
							]
						},
						{
							"name": "Data- Driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"BearerToken\");\r",
											"\r",
											"if (token) {\r",
											"    \r",
											"    pm.request.headers.upsert({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.warn(\"BearerToken is not set in environment!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    pm.test(\"Status code is 200 (Success)\", function () {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.test(\"Response is an array\", function () {\r",
											"        pm.expect(data).to.be.an(\"array\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"First item has required properties\", function () {\r",
											"        if (data.length > 0) {\r",
											"            const item = data[0];\r",
											"            pm.expect(item).to.have.property(\"morbidityId\");\r",
											"            pm.expect(item).to.have.property(\"morbidityMarkerMaxVal\");\r",
											"            pm.expect(item).to.have.property(\"morbidityMarkerMinVal\");\r",
											"            pm.expect(item).to.have.property(\"morbidityNameRegex\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestId\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestName\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestUnit\");\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.environment.set(\"morbidityData\", JSON.stringify(data));\r",
											"\r",
											"} else if (pm.response.code === 404) {\r",
											"    pm.test(\"Status code is 404 (Not Found)\", function () {\r",
											"        pm.expect(pm.response.code).to.equal(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Morbidity not found message exists\", function () {\r",
											"        const responseText = pm.response.text().toLowerCase();\r",
											"        pm.expect(responseText.includes(\"not found\")).to.be.true;\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected status code\", function () {\r",
											"        pm.expect.fail(`Expected 200 or 404, but got ${pm.response.code}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/morbidity/{{morbidityTestName}}",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity",
										"{{morbidityTestName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Testname _Data- Driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawEndpoint;\r",
											"\r",
											"if (pm.iterationData) {\r",
											"    rawEndpoint = pm.iterationData.get(\"endpoint\");\r",
											"} \r",
											"\r",
											"if (!rawEndpoint) {\r",
											"    rawEndpoint = pm.request.url.getPath();  // fallback: current path of the request\r",
											"}\r",
											"\r",
											"const baseUrl = pm.environment.get(\"baseurl\") || \"https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician\";\r",
											"\r",
											"if (rawEndpoint.startsWith(\"http\")) {\r",
											"    pm.request.url = rawEndpoint;\r",
											"} else {\r",
											"    let parts = rawEndpoint.split(\"/\").filter(p => p !== \"\");\r",
											"    let encodedPath = parts[0] || \"\";\r",
											"    for (let i = 1; i < parts.length; i++) {\r",
											"        encodedPath += \"/\" + encodeURIComponent(parts[i].trim());\r",
											"    }\r",
											"    pm.request.url = baseUrl + \"/\" + encodedPath;\r",
											"}\r",
											"\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.upsert({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.warn(\"BearerToken is not set in environment!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    pm.test(\"Status code is 200 (Success)\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.test(\"Response is an array\", () => {\r",
											"        pm.expect(data).to.be.an(\"array\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"First item has required properties\", () => {\r",
											"        if (data.length > 0) {\r",
											"            const item = data[0];\r",
											"            pm.expect(item).to.have.property(\"morbidityId\");\r",
											"            pm.expect(item).to.have.property(\"morbidityMarkerMaxVal\");\r",
											"            pm.expect(item).to.have.property(\"morbidityMarkerMinVal\");\r",
											"            pm.expect(item).to.have.property(\"morbidityNameRegex\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestId\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestName\");\r",
											"            pm.expect(item).to.have.property(\"morbidityTestUnit\");\r",
											"        }\r",
											"    });\r",
											"\r",
											"    // Optionally store response data in environment for next requests\r",
											"    pm.environment.set(\"morbidityData\", JSON.stringify(data));\r",
											"\r",
											"} else if (pm.response.code === 404) {\r",
											"    pm.test(\"Status code is 404 (Not Found)\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Morbidity not found message exists\", () => {\r",
											"        const responseText = pm.response.text().toLowerCase();\r",
											"        pm.expect(responseText.includes(\"not found\")).to.be.true;\r",
											"    });\r",
											"\r",
											"} else if (pm.response.code === 401) {\r",
											"    pm.test(\"Status code is 401 (Unauthorized)\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(401);\r",
											"    });\r",
											"\r",
											"} else if (pm.response.code === 400) {\r",
											"    pm.test(\"Status code is 400 (Bad Request)\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(400);\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    pm.test(\"Unexpected status code\", () => {\r",
											"        pm.expect.fail(`Expected 200, 404, 401, or 400 but got ${pm.response.code}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/morbidity/{{morbidityTestName}}",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"morbidity",
										"{{morbidityTestName}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "DIETICIAN-PUT GETBYID",
			"item": [
				{
					"name": "Admin_Login_Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"adminToken\",jsonData.token);\r",
									"\r",
									"commonTests.validGetPutRequest();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmail\":\"{{userLoginEmail}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get(ID)RetrieveWithInvalidBaseURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.notFoundRequest();\r",
									"\r",
									"pm.test(\"Response has Content-Type header with value 'text/html'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains the expected error message or title\", function () {\r",
									"    const expectedErrorMessage = \"Heroku | Application Error\";\r",
									"    pm.expect(pm.response.text()).to.include(expectedErrorMessage);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the 'viewport' meta tag is present in the response body\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseData).to.include('<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{InvalidBaseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{InvalidBaseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get(ID)RetrieveWithInvaliEndpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.notFoundRequest();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{invalidEndPoint}}",
							"host": [
								"{{baseURL}}{{invalidEndPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get(ID)RetrieveWithNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.unauthorizedRequest();\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get(ID)RetrieveWithAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.validGetPutRequest();\r",
									"commonTests.responseTime();\r",
									"\r",
									"pm.test(\"Response contains the ID\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"   \r",
									"    pm.expect(responseJson.id).to.be.a('string'); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician by ID with valid inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.validGetPutRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"const responseDOB= new Date(jsonData.DateOfBirth).toISOString();\r",
									"\r",
									"pm.test(\"Check proper updation of input fields\", ()=> {\r",
									"pm.expect(jsonData.ContactNumber).to.eql(pm.iterationData.get(\"Dietician_updateContactNumber\").toString());\r",
									"//pm.expect(responseDOB).to.eql(new Date(pm.iterationData.get(\"DateOfBirth\")).toISOString());\r",
									"pm.expect(jsonData.Education).to.eql(pm.iterationData.get(\"Dietician_updateEducation\"));\r",
									"pm.expect(jsonData.Email).to.eql(pm.iterationData.get(\"Dietician_updateEmail\"));\r",
									"pm.expect(jsonData.Firstname).to.eql(pm.iterationData.get(\"Dietician_updateFirstname\"));\r",
									"pm.expect(jsonData.HospitalCity).to.eql(pm.iterationData.get(\"Dietician_updateHospitalCity\"));\r",
									"pm.expect(jsonData.HospitalName).to.eql(pm.iterationData.get(\"Dietician_updateHospitalName\"));\r",
									"pm.expect(jsonData.HospitalPincode).to.eql(pm.iterationData.get(\"Dietician_updatePincode\").toString());\r",
									"pm.expect(jsonData.Lastname).to.eql(pm.iterationData.get(\"Dietician_updateLastname\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check proper updation of HospitalStreet field\", ()=> {\r",
									"pm.expect(jsonData.HospitalStreet).to.eql(pm.iterationData.get(\"Dietician_updateHospitalStreet\"));\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{Dietician_updateContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_updateDOB}}\",\r\n  \"Education\": \"{{Dietician_updateEducation}}\",\r\n  \"Email\": \"{{Dietician_updateEmail}}\",\r\n  \"Firstname\": \"{{Dietician_updateFirstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_updateHospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_updateHospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_updatePincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_updateHospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_updateLastname}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.validGetPutRequest();  \r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician with an invalid  ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.notFoundRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"const invalidDietcianID = pm.environment.get(\"InvalidUserId\");\r",
									"\r",
									"pm.test(\"Error message for invalid ID\", () => {   \r",
									" const expectedMessage = `Dietician with ${invalidDietcianID} does not exists`;\r",
									"pm.expect(jsonData.errorMessage).to.eql(expectedMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{InvalidUserId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{InvalidUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician by ID with invalid URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.notFoundRequest();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{invalidBaseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{invalidBaseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician by ID without mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"let expectedErrorMessage =\r",
									"{\r",
									"   \"lastName\": \"Dietician's lastname is required!\",\r",
									"    \"dHospitalName\": \"Dietician's hospital name is required!\",\r",
									"    \"firstName\": \"Dietician's firstname is required!\",\r",
									"    \"dHospitalCityName\": \"Dietician's hospital city name is required!\",\r",
									"    \"userLoginEmail\": \"Dietician's login email is required!\",\r",
									"    \"contact\": \"Dietician's contact number is required!\",\r",
									"    \"dEducation\": \"Dietician's education is required!\",\r",
									"    \"dateOfBirth\": \"Date of Birth is Mandatory!\",\r",
									"    \"dHospitalPinCode\": \"Dietician's hospital pincode is required!\",\r",
									"    \"dHospitalStreetName\": \"Dietician's hospital street name is required!\"\r",
									"};\r",
									"\r",
									"Object.keys(expectedErrorMessage).forEach(field => {\r",
									"    pm.test(`Error message for missing mandatory field ${field}`, ()=> {\r",
									"        pm.expect(jsonData[field]).to.eql(expectedErrorMessage[field]);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician by ID with an existing contactNumber and DOB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"parsedBody.ContactNumber = pm.iterationData.get(\"Dietician_updateExistingContactNo\");\r",
									"parsedBody.DateOfBirth = pm.iterationData.get(\"Dietician_updateExistingDOB\");\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician by ID with invalid field inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"const jsonData = pm.response.json();\r",
									"let expectedErrorMessage = {\r",
									"    \"firstName\": \"FirstName should only contain Alphabets\",\r",
									"    \"lastName\": \"LastName should only contain Alphabets\",\r",
									"    \"userLoginEmail\": \"Invalid Email Id!\",\r",
									"    \"contact\": \"Contact number should contain 10 digits\",\r",
									"    \"dHospitalPinCode\": \"Pincode should contain 6 digits\"\r",
									"};\r",
									"\r",
									"Object.keys(expectedErrorMessage).forEach(field => {\r",
									"pm.test(`Error message for invalid field ${field}`, ()=> {\r",
									"        pm.expect(jsonData[field]).to.eql(expectedErrorMessage[field]);\r",
									"    });\r",
									"});\r",
									"\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"parsedBody.ContactNumber = pm.iterationData.get(\"Dietician_updateInvalidContactNumber\");\r",
									"parsedBody.Education = pm.iterationData.get(\"Dietician_updateInvalidEducation\");\r",
									"parsedBody.Email = pm.iterationData.get(\"Dietician_updateInvalidEmailID\");\r",
									"parsedBody.Firstname = pm.iterationData.get(\"Dietician_updateInvalidFirstName\");\r",
									"parsedBody.HospitalCity = pm.iterationData.get(\"Dietician_updateInvalidCity\");\r",
									"parsedBody.HospitalName = pm.iterationData.get(\"Dietician_updateInvalidName\");\r",
									"parsedBody.HospitalPincode = pm.iterationData.get(\"Dietician_updateInvalidPincode\");\r",
									"parsedBody.HospitalStreet = pm.iterationData.get(\"Dietician_updateInvalidStreet\");\r",
									"parsedBody.Lastname = pm.iterationData.get(\"Dietician_updateInvalidLastName\");\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID with an improper Email Id format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message for input\", () => {\r",
									"pm.expect(jsonData.userLoginEmail).to.eql(\"Invalid Email Id!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let Dietician_updateInvalidEmailID = pm.iterationData.get(\"Dietician_updateInvalidEmailID\");\r",
									"\r",
									"\r",
									"parsedBody.Email = Dietician_updateInvalidEmailID;\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Detect if data comes from JSON or CSV\r",
							"if (typeof pm.variables.get('requestData') !== 'object' || pm.variables.get('requestData') === null) {\r",
							"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
							"}\r",
							"\r",
							"// Get the data (works for both JSON & CSV)\r",
							"const requestData = pm.variables.get('requestData');\r",
							"\r",
							"// If requestData is empty, exit\r",
							"if (typeof requestData !== 'object' || Object.keys(requestData).length === 0) {\r",
							"    console.log(' No external data provided / dataset is empty.');\r",
							"    return;\r",
							"}\r",
							"\r",
							"// Check if JSON structure exists\r",
							"if (Array.isArray(requestData.requests)) {\r",
							"    console.log(\" JSON Data Structure Detected\");\r",
							"\r",
							"    // Find data for the current request name\r",
							"    const currentRequest = requestData.requests.find(({ name }) => name === pm.info.requestName);\r",
							"\r",
							"    if (!currentRequest) {\r",
							"        console.log(` No data found for request: ${pm.info.requestName}`);\r",
							"    } else {\r",
							"        // Set variables for JSON format\r",
							"        const variables = currentRequest.data.shift();\r",
							"        Object.entries(variables).forEach(([key, value]) => {\r",
							"            pm.variables.set(key, value);\r",
							"        });\r",
							"\r",
							"        // Update the stored requestData for the next iteration\r",
							"        pm.variables.set('requestData', requestData);\r",
							"\r",
							"        // Re-run the same request if there are more test cases left\r",
							"        if (currentRequest.data.length > 0) {\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"    }\r",
							"} else {\r",
							"    console.log(\" CSV Data Structure Detected\");\r",
							"\r",
							"    // CSV files are already structured by Postman, directly assign variables\r",
							"    Object.keys(pm.iterationData.toObject()).forEach((key) => {\r",
							"        pm.variables.set(key, pm.iterationData.get(key));\r",
							"    });\r",
							"\r",
							"    // Log variables for debugging\r",
							"    console.log(\" Loaded CSV Variables:\", pm.iterationData.toObject());\r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Patient Module1_Nidhi",
			"item": [
				{
					"name": "Negative_Scenario",
					"item": [
						{
							"name": "invalid Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if Status line is Not Found\", function () {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing mandatory field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"pm.request.body.mode = \"formdata\";\r",
											"pm.request.body.formdata = { \"key\": \"file\", \"type\": \"file\", \"src\": \"C:\\\\Users\\\\nidhi\\\\Downloads\\\\CBC-sample-1.pdf\" };\r",
											"*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"FirstName\":\"Alka\",\"ContactNumber\":\"9999991110\",\"Email\":\"anita.vbuIikoma@example.com\",\"Allergy\":\"MILK\",\"FoodPreference\":\"Vegetarian\",\"CuisineCategory\":\"Punjabi\",\"DateOfBirth\":\"1997-01-11\"}\n",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{Base_URL}}/patient",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient?patientInfo=%7B%22FirstName%22%3A%22Anita%22%2C%22LastName%22%3A%22Sharma%22%2C%22ContactNumber%22%3A%229876543210%22%2C%22Email%22%3A%22anita.sharma%40example.com%22%2C%22Allergy%22%3A%22MILK%22%2C%22FoodPreference%22%3A%22Vegetarian%22%2C%22CuisineCategory%22%3A%22Punjabi%22%2C%22DateOfBirth%22%3A%221985-06-15%22%7D' \\\r\n  -H 'accept: */*' \\\r\n  -H 'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg' \\\r\n  -H 'Content-Type: multipart/form-data' \\\r\n  -F 'file=@CBC-sample 1.pdf;type=application/pdf' \\\r\n  -F 'vitals='"
							},
							"response": []
						},
						{
							"name": "Empty input data fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"pm.request.body.mode = \"formdata\";\r",
											"pm.request.body.formdata = { \"key\": \"file\", \"type\": \"file\", \"src\": \"C:\\\\Users\\\\nidhi\\\\Downloads\\\\CBC-sample-1.pdf\" };\r",
											"*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "jW9CDTnNg/Diabetic and Hemogram Test_Thyrocare lab.pdf"
										}
									]
								},
								"url": {
									"raw": "{{Base_URL}}/patient",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient?patientInfo=%7B%22FirstName%22%3A%22Anita%22%2C%22LastName%22%3A%22Sharma%22%2C%22ContactNumber%22%3A%229876543210%22%2C%22Email%22%3A%22anita.sharma%40example.com%22%2C%22Allergy%22%3A%22MILK%22%2C%22FoodPreference%22%3A%22Vegetarian%22%2C%22CuisineCategory%22%3A%22Punjabi%22%2C%22DateOfBirth%22%3A%221985-06-15%22%7D' \\\r\n  -H 'accept: */*' \\\r\n  -H 'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg' \\\r\n  -H 'Content-Type: multipart/form-data' \\\r\n  -F 'file=@CBC-sample 1.pdf;type=application/pdf' \\\r\n  -F 'vitals='"
							},
							"response": []
						},
						{
							"name": "Invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if Status line is Not Found\", function () {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/patien",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patien"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact number<10 digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"pm.request.body.mode = \"formdata\";\r",
											"pm.request.body.formdata = { \"key\": \"file\", \"type\": \"file\", \"src\": \"C:\\\\Users\\\\nidhi\\\\Downloads\\\\CBC-sample-1.pdf\" };\r",
											"*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"patientId\":404,\"FirstName\":\"Priya\",\"LastName\":\"Kapoor\",\"ContactNumber\":\"987653210\",\"Email\":\"priya.kapoor@example.com\",\"Allergy\":\"None\",\"FoodPreference\":\"Nonâ€‘Vegetarian\",\"CuisineCategory\":\"Italian\",\"DateOfBirth\":\"1978-03-14\",\"DieticianId\":12}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1f06305f-732e-4720-a393-a68ecd06e3ec"
										}
									]
								},
								"url": {
									"raw": "{{Base_URL}}/patient",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient?patientInfo=%7B%22FirstName%22%3A%22Anita%22%2C%22LastName%22%3A%22Sharma%22%2C%22ContactNumber%22%3A%229876543210%22%2C%22Email%22%3A%22anita.sharma%40example.com%22%2C%22Allergy%22%3A%22MILK%22%2C%22FoodPreference%22%3A%22Vegetarian%22%2C%22CuisineCategory%22%3A%22Punjabi%22%2C%22DateOfBirth%22%3A%221985-06-15%22%7D' \\\r\n  -H 'accept: */*' \\\r\n  -H 'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg' \\\r\n  -H 'Content-Type: multipart/form-data' \\\r\n  -F 'file=@CBC-sample 1.pdf;type=application/pdf' \\\r\n  -F 'vitals='"
							},
							"response": []
						},
						{
							"name": "Empty First Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"pm.request.body.mode = \"formdata\";\r",
											"pm.request.body.formdata = { \"key\": \"file\", \"type\": \"file\", \"src\": \"C:\\\\Users\\\\nidhi\\\\Downloads\\\\CBC-sample-1.pdf\" };\r",
											"*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"patientId\":404,\"FirstName\":\"Priya\",\"LastName\":\"Kapoor\",\"ContactNumber\":\"987653210\",\"Email\":\"priya.kapoor@example.com\",\"Allergy\":\"None\",\"FoodPreference\":\"Nonâ€‘Vegetarian\",\"CuisineCategory\":\"Italian\",\"DateOfBirth\":\"1978-03-14\",\"DieticianId\":12}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1f06305f-732e-4720-a393-a68ecd06e3ec"
										}
									]
								},
								"url": {
									"raw": "{{Base_URL}}/patient",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient?patientInfo=%7B%22FirstName%22%3A%22Anita%22%2C%22LastName%22%3A%22Sharma%22%2C%22ContactNumber%22%3A%229876543210%22%2C%22Email%22%3A%22anita.sharma%40example.com%22%2C%22Allergy%22%3A%22MILK%22%2C%22FoodPreference%22%3A%22Vegetarian%22%2C%22CuisineCategory%22%3A%22Punjabi%22%2C%22DateOfBirth%22%3A%221985-06-15%22%7D' \\\r\n  -H 'accept: */*' \\\r\n  -H 'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg' \\\r\n  -H 'Content-Type: multipart/form-data' \\\r\n  -F 'file=@CBC-sample 1.pdf;type=application/pdf' \\\r\n  -F 'vitals='"
							},
							"response": []
						},
						{
							"name": "Contact number>10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"pm.request.body.mode = \"formdata\";\r",
											"pm.request.body.formdata = { \"key\": \"file\", \"type\": \"file\", \"src\": \"C:\\\\Users\\\\nidhi\\\\Downloads\\\\CBC-sample-1.pdf\" };\r",
											"*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"patientId\":404,\"FirstName\":\"Priya\",\"LastName\":\"Kapoor\",\"ContactNumber\":\"98765321011\",\"Email\":\"priya.kapoor@example.com\",\"Allergy\":\"None\",\"FoodPreference\":\"Nonâ€‘Vegetarian\",\"CuisineCategory\":\"Italian\",\"DateOfBirth\":\"1978-03-14\",\"DieticianId\":12}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1f06305f-732e-4720-a393-a68ecd06e3ec"
										}
									]
								},
								"url": {
									"raw": "{{Base_URL}}/patient",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient?patientInfo=%7B%22FirstName%22%3A%22Anita%22%2C%22LastName%22%3A%22Sharma%22%2C%22ContactNumber%22%3A%229876543210%22%2C%22Email%22%3A%22anita.sharma%40example.com%22%2C%22Allergy%22%3A%22MILK%22%2C%22FoodPreference%22%3A%22Vegetarian%22%2C%22CuisineCategory%22%3A%22Punjabi%22%2C%22DateOfBirth%22%3A%221985-06-15%22%7D' \\\r\n  -H 'accept: */*' \\\r\n  -H 'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg' \\\r\n  -H 'Content-Type: multipart/form-data' \\\r\n  -F 'file=@CBC-sample 1.pdf;type=application/pdf' \\\r\n  -F 'vitals='"
							},
							"response": []
						},
						{
							"name": "Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{Base_URL}}/patient",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Base_URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f250665cc.herokuapp.com/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f250665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid PatientId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/patient/testReports/y7u\n",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient",
										"testReports",
										"y7u\n"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid File Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/patient/testReports/viewFile/y78u",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"y78u"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Positive_Scenario",
					"item": [
						{
							"name": "User Login Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(pm.response.text());\r",
											"pm.environment.set(\"login_token\",jsonData.token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}'"
							},
							"response": []
						},
						{
							"name": "Dietician Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(pm.response.text());\r",
											"pm.environment.set(\"dietician_token_nidhi\",jsonData.token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{login_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"ujitopianyryfhf@gmail.com\",\r\n  \"password\": \"Unity99\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"userLoginEmail\": \"ujitopianyryfhf@gmail.com\",\r\n  \"password\": \"Unity99\"\r\n}'"
							},
							"response": []
						},
						{
							"name": "Create patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(pm.response.text());\r",
											"pm.environment.set(\"patient_id_nidhi1\",jsonData.patientId);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"pm.request.body.mode = \"formdata\";\r",
											"pm.request.body.formdata = { \"key\": \"file\", \"type\": \"file\", \"src\": \"C:\\\\Users\\\\nidhi\\\\Downloads\\\\CBC-sample-1.pdf\" };\r",
											"*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"FirstName\":\"{{FirstName}}\",\"LastName\":\"{{LastName}}\",\"ContactNumber\":\"{{ContactNumber}}\",\"Email\":\"{{Email}}\",\"Allergy\":\"{{Allergy}}\",\"FoodPreference\":\"{{FoodPreference}}\",\"CuisineCategory\":\"{{CuisineCategory}}\",\"DateOfBirth\":\"{{DateOfBirth}}\"}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1f06305f-732e-4720-a393-a68ecd06e3ec"
										}
									]
								},
								"url": {
									"raw": "{{Base_URL}}/patient",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient?patientInfo=%7B%22FirstName%22%3A%22Anita%22%2C%22LastName%22%3A%22Sharma%22%2C%22ContactNumber%22%3A%229876543210%22%2C%22Email%22%3A%22anita.sharma%40example.com%22%2C%22Allergy%22%3A%22MILK%22%2C%22FoodPreference%22%3A%22Vegetarian%22%2C%22CuisineCategory%22%3A%22Punjabi%22%2C%22DateOfBirth%22%3A%221985-06-15%22%7D' \\\r\n  -H 'accept: */*' \\\r\n  -H 'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg' \\\r\n  -H 'Content-Type: multipart/form-data' \\\r\n  -F 'file=@CBC-sample 1.pdf;type=application/pdf' \\\r\n  -F 'vitals='"
							},
							"response": []
						},
						{
							"name": "All Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Check if Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if Status line is OK\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"var schema =\r",
											"{\r",
											"   \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"$ref\": \"#/definitions/Welcome2Element\"\r",
											"    },\r",
											"    \"definitions\": {\r",
											"        \"Welcome2Element\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"patientId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"FirstName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"LastName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"ContactNumber\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"Email\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"Allergy\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"FoodPreference\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"CuisineCategory\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"FileMorbidity\": {\r",
											"                    \"$ref\": \"#/definitions/FileMorbidity\"\r",
											"                },\r",
											"                \"FileMorbidityCondition\": {\r",
											"                    \"$ref\": \"#/definitions/FileMorbidityCondition\"\r",
											"                },\r",
											"                \"DateOfBirth\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"format\": \"date\"\r",
											"                },\r",
											"                \"DieticianId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"Allergy\",\r",
											"                \"ContactNumber\",\r",
											"                \"CuisineCategory\",\r",
											"                \"DateOfBirth\",\r",
											"                \"DieticianId\",\r",
											"                \"Email\",\r",
											"                \"FirstName\",\r",
											"                \"FoodPreference\",\r",
											"                \"LastName\",\r",
											"                \"patientId\"\r",
											"            ],\r",
											"            \"title\": \"Welcome2Element\"\r",
											"        },\r",
											"        \"FileMorbidity\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": true,\r",
											"            \"properties\": {\r",
											"                \r",
											"            },\r",
											"            \"required\": [\r",
											"                \r",
											"            ],\r",
											"            \"title\": \"FileMorbidity\"\r",
											"        },\r",
											"        \r",
											"        \"FileMorbidityCondition\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": true,\r",
											"            \"properties\": {\r",
											"                \r",
											"            },\r",
											"            \"required\": [\r",
											"                \r",
											"            ],\r",
											"            \"title\": \"FileMorbidityCondition\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema validation\", function()  {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{Base_URL}}/patient",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patient Morbidity Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(pm.response.text());\r",
											"pm.environment.set(\"patient_file_id_nidhi1\",jsonData[0].fileId);\r",
											"\r",
											"\r",
											"pm.test(\"Check if Status line is OK\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//presence of header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//header value\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// response time to 3000ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/patient/testReports/{{patient_id_nidhi1}}\n",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient",
										"testReports",
										"{{patient_id_nidhi1}}\n"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patient file by File Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"/*\r",
											"\r",
											"pm.test(\"FileId and fileName are present\", function () {\r",
											"    pm.expect(jsonData[0].fileId).to.not.be.undefined;\r",
											"    pm.expect(jsonData[0].fileName).to.include(\".pdf\");\r",
											"});\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/patient/testReports/viewFile/{{patient_file_id_nidhi1}}",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"{{patient_file_id_nidhi1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dietician_token_nidhi}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/patient/{{patient_id_nidhi1}}\n",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"patient",
										"{{patient_id_nidhi1}}\n"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Patient_Module2_Lavanya",
			"item": [
				{
					"name": "Create patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Validate Status Code & Status Text\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status text is Created\", () => {\r",
									"    pm.expect(pm.response.status).to.eql(\"Created\");\r",
									"});\r",
									"\r",
									"//  Extract data and store in environment\r",
									"const response = pm.response.json();\r",
									"const userId = response.userId;\r",
									"pm.environment.set(\"patientId\", userId);\r",
									"\r",
									"const userFirstName = response.userFirstName;\r",
									"pm.environment.set(\"userFirstName\", userFirstName);\r",
									"pm.environment.set(\"runPositiveFlow\", \"Y\");\r",
									"// 2. Parse JSON response\r",
									"//const response = pm.response.json();\r",
									"\r",
									"// 3. Set Environment Variables (optional)\r",
									"pm.environment.set(\"patientFirstName\", response.FirstName);\r",
									"pm.environment.set(\"patientLastName\", response.LastName);\r",
									"pm.environment.set(\"patientEmail\", response.Email);\r",
									"pm.environment.set(\"patientContactNumber\", response.ContactNumber);\r",
									"\r",
									"// 4. Content-Type header validation\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 5. JSON Schema Validation\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"FirstName\": { \"type\": \"string\" },\r",
									"        \"LastName\": { \"type\": \"string\" },\r",
									"        \"ContactNumber\": { \"type\": \"string\" },\r",
									"        \"Email\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"email\"\r",
									"        },\r",
									"        \"Allergy\": { \"type\": \"string\" },\r",
									"        \"FoodPreference\": { \"type\": \"string\" },\r",
									"        \"CuisineCategory\": { \"type\": \"string\" },\r",
									"        \"DateOfBirth\": { \"type\": \"string\", \"format\": \"date\" }\r",
									"    },\r",
									"    \"required\": [\"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\", \"DateOfBirth\"]\r",
									"};\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 6. Field-by-field Data Validation from data file\r",
									"pm.test(\"Data Validation of all fields\", () => {\r",
									"    pm.expect(response.FirstName).to.eql(pm.iterationData.get(\"FirstName\"));\r",
									"    pm.expect(response.LastName).to.eql(pm.iterationData.get(\"LastName\"));\r",
									"    //pm.expect(response.ContactNumber+\"\").to.eql(pm.iterationData.get(\"ContactNumber\"));\r",
									"    pm.expect(response.Email).to.eql(pm.iterationData.get(\"Email\"));\r",
									"    pm.expect(response.Allergy).to.eql(pm.iterationData.get(\"Allergy\"));\r",
									"    pm.expect(response.FoodPreference).to.eql(pm.iterationData.get(\"FoodPreference\"));\r",
									"    pm.expect(response.CuisineCategory).to.eql(pm.iterationData.get(\"CuisineCategory\"));\r",
									"    pm.expect(response.DateOfBirth).to.eql(pm.iterationData.get(\"DateOfBirth\"));\r",
									"});\r",
									"\r",
									"// 7. Move to next request if needed\r",
									" pm.execution.setNextRequest(\"Update Patient\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const scenario = pm.iterationData.get(\"scenario\");\r",
									"\r",
									"if (scenario != \"positive\") {\r",
									"    console.log(\"Skipping Scenario:\", scenario);\r",
									"    pm.execution.skipRequest();\r",
									"}\r",
									"console.log(\"FirstName:\", pm.iterationData.get(\"FirstName\"));\r",
									"console.log(\"LastName:\", pm.iterationData.get(\"LastName\"));\r",
									"console.log(\"ContactNumber:\", pm.iterationData.get(\"ContactNumber\"));\r",
									"console.log(\"Email:\", pm.iterationData.get(\"Email\"));\r",
									"console.log(\"DateOfBirth:\", pm.iterationData.get(\"DateOfBirth\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Lavanya_dietitian_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n  \"FirstName\": \"{{FirstName}}\",\n  \"LastName\": \"{{LastName}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"Email\": \"{{Email}}\",\n  \"Allergy\": \"{{Allergy}}\",\n  \"FoodPreference\": \"{{FoodPreference}}\",\n  \"CuisineCategory\": \"{{CuisineCategory}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"patient"
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient?patientInfo=%7B%22FirstName%22%3A%22Anita%22%2C%22LastName%22%3A%22Sharma%22%2C%22ContactNumber%22%3A%229876543210%22%2C%22Email%22%3A%22anita.sharma%40example.com%22%2C%22Allergy%22%3A%22MILK%22%2C%22FoodPreference%22%3A%22Vegetarian%22%2C%22CuisineCategory%22%3A%22Punjabi%22%2C%22DateOfBirth%22%3A%221985-06-15%22%7D' \\\r\n  -H 'accept: */*' \\\r\n  -H 'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1aml0b3BpYW55cnlmaGZAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM3Nzc4LCJleHAiOjE3NTI1NjY1Nzh9.0XLZ0BESF1zWEEjgMfEJTr_cAq-LgjCDifyAoOhzBUhC_4T_7bhfKhPgPEuCDWR-PbFh0CxFxFzsWPe-Dox2Lg' \\\r\n  -H 'Content-Type: multipart/form-data' \\\r\n  -F 'file=@CBC-sample 1.pdf;type=application/pdf' \\\r\n  -F 'vitals='"
					},
					"response": []
				},
				{
					"name": "Update Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const scenario = pm.iterationData.get(\"scenario\");\r",
									"\r",
									"if (scenario != \"updatePatient\") {\r",
									" console.log(\"Skipping Scenario:\", scenario);\r",
									"    pm.execution.skipRequest();\r",
									"//}else{\r",
									"   // patientId = pm.environment.get(\"patientId\");\r",
									"    console.log(\"FirstName:\" + pm.iterationData.get(\"FirstName\"));\r",
									"    //if(pm.iterationData.get(\"FirstName\") = null){\r",
									"       // pm.iterationData.set(\"FirstName\")==patientFirstName\r",
									"    //}\r",
									"//}\r",
									"\r",
									"\r",
									"\r",
									"// This runs before the PUT request\r",
									"//console.log(\"Updating user with ID: \" + pm.environment.get(\"userId\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.environment.set(\"userId\", response.userId || response.patientId); // Depends on your API\r",
									"\r",
									"pm.test(\"Status is OK\", () =>  {\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Data Validation of updated fields\", ()=> {\r",
									"    pm.expect(response.userLastName).to.eql(pm.iterationData.get(\"put_lastName\"));\r",
									"    pm.expect(response.userAddress.street).to.eql(pm.iterationData.get(\"put_street\"));\r",
									"});\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.execution.setNextRequest(\"Delete patientID\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Lavanya_dietitian_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n  \"FirstName\": \"{{FirstName}}\",\n  \"LastName\": \"{{LastName}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"Email\": \"{{Email}}\",\n  \"Allergy\": \"{{Allergy}}\",\n  \"FoodPreference\": \"{{FoodPreference}}\",\n  \"CuisineCategory\": \"{{CuisineCategory}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\"\n}",
									"type": "text"
								},
								{
									"key": "patientId",
									"value": "{{patientId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{patientId}\n",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"patient",
								"{patientId}\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete patientID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is OK\", () => {\r",
									"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
									"});\r",
									"\r",
									"const jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is Success\", () => {\r",
									"    pm.expect(jsonResponse[\"status\"]).to.eql(\"Success\");\r",
									"    pm.expect(jsonResponse[\"msg\"]).to.eql(\"User is deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"runPositiveFlow\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const scenario = pm.iterationData.get(\"scenario\");\r",
									"\r",
									"if (scenario != \"DeletePatient\") {\r",
									"    console.log(\"Skipping Scenario:\", scenario);\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNTA1QGdtYWlsLmNvbSIsImlhdCI6MTc1Mjc4NTk5NCwiZXhwIjoxNzUyODE0Nzk0fQ.Mb7WGcoJ7FGbbP7jmDQMfPPnIq2uIAnvhwjjpwezD061pMC0LeP5CZ59x0YgDft1QALImFXg7rlMGoP0u30pZg",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{patientId}?patientId={{patientId}}",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"patient",
								"{patientId}"
							],
							"query": [
								{
									"key": "patientId",
									"value": "{{patientId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Module -Guna",
			"item": [
				{
					"name": "User Module-Login",
					"item": [
						{
							"name": "UserLogin_Ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Login response contains valid user details and token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData).to.have.property(\"loginUserEmail\");\r",
											"    pm.expect(jsonData).to.have.property(\"roles\");\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"    pm.expect(jsonData).to.have.property(\"userId\");\r",
											"\r",
											"    pm.expect(jsonData.loginUserEmail).to.be.a(\"string\").and.not.empty;\r",
											"    pm.expect(jsonData.roles).to.be.an(\"array\").that.is.not.empty;\r",
											"    pm.expect(jsonData.token).to.be.a(\"string\").and.not.empty;\r",
											"    pm.expect(jsonData.type).to.be.a(\"string\").and.not.empty;\r",
											"    pm.expect(jsonData.userId).to.be.a(\"number\");\r",
											"});\r",
											"pm.test(\"Extract and save Bearer token as global variable\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"    pm.expect(jsonData.token).to.be.a(\"string\").and.not.empty;\r",
											"    // Set token globally - do not Delete this is used for Logout\r",
											"    pm.environment.set(\"LoginauthToken\", jsonData.token);\r",
											"    console.log(\"Bearer token saved : \" + jsonData.token);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "UserLogin_Ok",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 17 Jul 2025 16:46:43 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=VKDc5GSl3Fy%2BXC9sWS8f5t4RNNRUe%2BJG9frDpns6XNQ%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752770803\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=VKDc5GSl3Fy%2BXC9sWS8f5t4RNNRUe%2BJG9frDpns6XNQ%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752770803\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "290"
										}
									],
									"cookie": [],
									"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNTA1QGdtYWlsLmNvbSIsImlhdCI6MTc1Mjc3MDgwMywiZXhwIjoxNzUyNzk5NjAzfQ.7qW60ewIJPEnTEuEm_LCaez7eSm3brO4m9HMCX1PI5fhnLJqNi-a3uEtEDMJF1PHwNquDwyguUVJQOT7pWPc0A\",\n    \"type\": \"Bearer \",\n    \"userId\": 6,\n    \"loginUserEmail\": \"Team505@gmail.com\",\n    \"roles\": [\n        \"ROLE_ADMIN\"\n    ]\n}"
								}
							]
						},
						{
							"name": "InvalidMethod_GET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 405 for incorrect HTTP method\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Response_GET",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Allow",
											"value": "POST"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 00:55:14 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=Z6zDN95N3fYKE0u8fYlnFVCIyAGTCDYvraopNzXjCYk%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752454514\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=Z6zDN95N3fYKE0u8fYlnFVCIyAGTCDYvraopNzXjCYk%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752454514\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "147"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T00:55:14.081674106\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"message\": \"HTTP method is not supported for this endpoint.\"\n}"
								}
							]
						},
						{
							"name": "Invalid_EndPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login_user",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login_user"
									]
								}
							},
							"response": [
								{
									"name": "Resp_Invalid_Endpoint",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login_user",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login_user"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:00:48 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=6wPvYccllugOpPUiBaPrZge7z5sYrGIN3uJDXVfq6XQ%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752454848\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=6wPvYccllugOpPUiBaPrZge7z5sYrGIN3uJDXVfq6XQ%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752454848\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T01:00:48.727326562\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								}
							]
						},
						{
							"name": "Login_Empty_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										""
									]
								}
							},
							"response": [
								{
									"name": "Login_Empty_Endpoint",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:03:57 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=ydovS95pOhQiTfowjjRpq4%2Bitm3BsO10UU1jRwdc1Ys%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752455037\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=ydovS95pOhQiTfowjjRpq4%2Bitm3BsO10UU1jRwdc1Ys%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752455037\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T01:03:57.349975962\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								}
							]
						},
						{
							"name": "Login_empty_pwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 for invalid credentials\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errorCode\");\r",
											"    pm.expect(jsonData.errorCode.toLowerCase()).to.include(\"invalid\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_empty_pwd",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:06:32 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=dm7swc9QQ%2FKIpOaW9MxvLEWbd6AK5vCoKsGjkL%2F1s4E%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752455192\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=dm7swc9QQ%2FKIpOaW9MxvLEWbd6AK5vCoKsGjkL%2F1s4E%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752455192\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "77"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"Invalid UserName or Password\",\n    \"errorMessage\": \"Bad credentials\"\n}"
								}
							]
						},
						{
							"name": "Login_Invalid emailFormat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 for invalid credentials\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errorCode\");\r",
											"    pm.expect(jsonData.errorCode.toLowerCase()).to.include(\"invalid\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_Invalid_Email_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505gmail.com\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:10:39 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=YEoLE6cuICg0INZBhzMP%2FKQFy5VKnUD0j9Lh0szagQk%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752455439\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=YEoLE6cuICg0INZBhzMP%2FKQFy5VKnUD0j9Lh0szagQk%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752455439\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "77"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"Invalid UserName or Password\",\n    \"errorMessage\": \"Bad credentials\"\n}"
								}
							]
						},
						{
							"name": "Login_Username_spl_char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 for invalid credentials\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errorCode\");\r",
											"    pm.expect(jsonData.errorCode.toLowerCase()).to.include(\"invalid\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail$%^%\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Username_spl_char_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail$%^%\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:16:49 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=66ofmqw%2BqNE5tpL0xXsAJ%2F2IecPPojKJy2IppGggVrE%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752455808\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=66ofmqw%2BqNE5tpL0xXsAJ%2F2IecPPojKJy2IppGggVrE%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752455808\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "77"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"Invalid UserName or Password\",\n    \"errorMessage\": \"Bad credentials\"\n}"
								}
							]
						},
						{
							"name": "Login_Invalid_BaseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return Heroku No such app error page\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"    pm.expect(pm.response.text()).to.include(\"No such app\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-0665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-0665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_Invalid_BaseUrl_Resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Content-Length",
											"value": "548"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "2025-07-14 01:20:10.815409547 +0000 UTC"
										},
										{
											"key": "Server",
											"value": "heroku-router"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>No such app</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Login_Invalid_content_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 415 Unsupported Media Type\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Unsupported Media Type\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"unexpected\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_Invalid_content_type-resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Accept",
											"value": "application/json, application/*+json"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:23:46 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=Euu6c21cGbCxjn7qrEL3LmyH7sbjg4Y8WyFhgIgggQk%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752456226\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=Euu6c21cGbCxjn7qrEL3LmyH7sbjg4Y8WyFhgIgggQk%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752456226\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "133"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T01:23:46.730410363\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								}
							]
						},
						{
							"name": "Login_empty_userlogin_pwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error.toLowerCase()).to.include(\"unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_empty_username_pwd_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"\",\r\n  \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:28:16 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=4FUth4Hkzez%2FgvkMiOrFgxqCuT4kgkOqV9ocCsPc78k%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752456496\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=4FUth4Hkzez%2FgvkMiOrFgxqCuT4kgkOqV9ocCsPc78k%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752456496\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "122"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T01:28:16.15172253\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								}
							]
						},
						{
							"name": "Login_invalid_Remove_userlogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 for invalid credentials\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errorCode\");\r",
											"    pm.expect(jsonData.errorCode.toLowerCase()).to.include(\"invalid\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_invalid_remove_userlogin_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:31:36 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=Amhb%2FqsLFTFXVqqDIo0Di8XNShgLkO%2FUQnf%2Fk4AbE7o%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752456695\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=Amhb%2FqsLFTFXVqqDIo0Di8XNShgLkO%2FUQnf%2Fk4AbE7o%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752456695\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "77"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"Invalid UserName or Password\",\n    \"errorMessage\": \"Bad credentials\"\n}"
								}
							]
						},
						{
							"name": "Login_New_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 for invalid credentials\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errorCode\");\r",
											"    pm.expect(jsonData.errorCode.toLowerCase()).to.include(\"invalid\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"GTesting505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_newuser_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"GTesting505@gmail.com\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:44:29 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=sioT%2FfOEZzsiCC%2Bh8JYuELcWVFKrypkbSAJ%2FiLTeTWM%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752457469\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=sioT%2FfOEZzsiCC%2Bh8JYuELcWVFKrypkbSAJ%2FiLTeTWM%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752457469\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "77"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"Invalid UserName or Password\",\n    \"errorMessage\": \"Bad credentials\"\n}"
								}
							]
						},
						{
							"name": "Login_remove_pwd_reqbody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 for invalid credentials\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errorCode\");\r",
											"    pm.expect(jsonData.errorCode.toLowerCase()).to.include(\"invalid\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_remove_pwd_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"Team505@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:36:08 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=76tYYm6PROntFy8j2CPqyDpMPGM2aezqw2bbgmlOMOo%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752456968\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=76tYYm6PROntFy8j2CPqyDpMPGM2aezqw2bbgmlOMOo%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752456968\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "77"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"Invalid UserName or Password\",\n    \"errorMessage\": \"Bad credentials\"\n}"
								}
							]
						},
						{
							"name": "Login_user-pwd_same",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 with error message\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error.toLowerCase()).to.include(\"unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"test\",\r\n  \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_same_user_pwd_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"test\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:49:48 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=clqCN38DGNpKGz77RULPxofSCN%2FVCiYNZGTNMm7bICU%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752457788\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=clqCN38DGNpKGz77RULPxofSCN%2FVCiYNZGTNMm7bICU%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752457788\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T01:49:48.579124645\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								}
							]
						},
						{
							"name": "Login_user_pwd_same_emailid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 with error message\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error.toLowerCase()).to.include(\"unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmail\": \"test@gmail.com\",\r\n  \"password\": \"test@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login_same_user_pwd_email_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmail\": \"test@gmail.com\",\r\n  \"password\": \"test@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 01:55:42 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=s23v%2FhQqPMIRNGlD%2B0y5B7BJdzMQmyl%2BCQuyZFyHCQk%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752458142\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=s23v%2FhQqPMIRNGlD%2B0y5B7BJdzMQmyl%2BCQuyZFyHCQk%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752458142\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "77"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorCode\": \"Invalid UserName or Password\",\n    \"errorMessage\": \"Bad credentials\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "User Module-Logout",
					"item": [
						{
							"name": "Logout_success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Logout successful\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{LoginauthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/logoutdietician",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": [
								{
									"name": "Logout_success_resp",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"logoutdietician"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 02:01:12 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=yK1wznhm%2FMRfAqm4303H55zHVoRXBfJbY%2FTfPhySMUo%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752458472\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=yK1wznhm%2FMRfAqm4303H55zHVoRXBfJbY%2FTfPhySMUo%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752458472\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										}
									],
									"cookie": [],
									"body": "Logout successful"
								}
							]
						},
						{
							"name": "Logout_invalid_token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Should return 401 for Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "WFtNTA1QGdbSIsImlhdCI6M",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/logoutdietician",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": [
								{
									"name": "Logout_invalid_token_resp",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"logoutdietician"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 02:08:58 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=RMamRlVGX2sP4S7UFBHG3EW4G4WpL%2FGXBl2m0I1vNdg%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752458938\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=RMamRlVGX2sP4S7UFBHG3EW4G4WpL%2FGXBl2m0I1vNdg%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752458938\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T02:08:58.136405359\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								}
							]
						},
						{
							"name": "Logout_Invalid_BaseUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return No such app error page\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
											"    pm.expect(pm.response.text()).to.include(\"No such app\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{LoginauthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-8665cc.herokuapp.com/dietician/logoutdietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-8665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"logoutdietician"
									]
								}
							},
							"response": [
								{
									"name": "Logout_Invalid_Baseurl_resp",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-.herokuapp.com/dietician/logoutdietician",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"logoutdietician"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Content-Length",
											"value": "548"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "2025-07-14 02:11:14.047919439 +0000 UTC"
										},
										{
											"key": "Server",
											"value": "heroku-router"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>No such app</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Logout_empty_endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Not Found\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Endpoint not supported.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{LoginauthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										""
									]
								}
							},
							"response": [
								{
									"name": "logout_empty_endpoint_resp",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 02:13:25 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=wHuRCp5pxq9d1T2PzXF0dhi0UQSfmnPqOHOUjvzyLcM%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752459205\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=wHuRCp5pxq9d1T2PzXF0dhi0UQSfmnPqOHOUjvzyLcM%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752459205\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "113"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T02:13:25.81734558\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"message\": \"Endpoint not supported.\"\n}"
								}
							]
						},
						{
							"name": "Logout_invalid_endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 error\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{LoginauthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/logoutdieticians1",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"logoutdieticians1"
									]
								}
							},
							"response": [
								{
									"name": "Logout_Invalid_Endoint_resp",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdieticians",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"logoutdieticians"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 02:24:30 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=qHc279O8qbMpvM%2Fgisi8AMuYoxz%2F%2FGmqU0rhnYuJ01Q%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752459870\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=qHc279O8qbMpvM%2Fgisi8AMuYoxz%2F%2FGmqU0rhnYuJ01Q%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752459870\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "114"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T02:24:30.808480864\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"message\": \"Endpoint not supported.\"\n}"
								}
							]
						},
						{
							"name": "Logout_Invalid_Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Should return 405 for Invalid Method\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{LoginauthToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/logoutdietician",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": [
								{
									"name": "Logout_Invalid_method_resp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"logoutdietician"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Allow",
											"value": "GET"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 02:26:33 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=NKFQYMrhyGOuzeyqKDdJSH58DdKZSJBY6dBaGODml3o%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752459993\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=NKFQYMrhyGOuzeyqKDdJSH58DdKZSJBY6dBaGODml3o%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752459993\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "147"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T02:26:33.796412286\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"message\": \"HTTP method is not supported for this endpoint.\"\n}"
								}
							]
						},
						{
							"name": "Logout_No_auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 for invalid credentials\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/logoutdietician",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": [
								{
									"name": "Logout_No_auth_resp",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"logoutdietician"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 02:29:10 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=Ml66EEGkfLEd09fpfOlvPl03qZFOig48lcEQDWH7ggA%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752460150\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=Ml66EEGkfLEd09fpfOlvPl03qZFOig48lcEQDWH7ggA%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752460150\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "123"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T02:29:10.987911203\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"An unexpected error occurred.\"\n}"
								}
							]
						},
						{
							"name": "Logout_use_login_endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 405 for incorrect HTTP method\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{LoginauthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Logout_invalid_login_endpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"login"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Allow",
											"value": "POST"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 02:34:30 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=6GtiXgYubMB%2FArbeF1jO%2FuPIQeydiaQM2Gmoqc7%2BADs%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752460471\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=6GtiXgYubMB%2FArbeF1jO%2FuPIQeydiaQM2Gmoqc7%2BADs%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752460471\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Content-Length",
											"value": "147"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-14T02:34:31.805785828\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"message\": \"HTTP method is not supported for this endpoint.\"\n}"
								}
							]
						},
						{
							"name": "Logout_Reuse_token_success",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{LoginauthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/logoutdietician",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": [
								{
									"name": "Logout_reuse_token_resp",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
											"protocol": "https",
											"host": [
												"dietician-july-api-hackathon-80f2590665cc",
												"herokuapp",
												"com"
											],
											"path": [
												"dietician",
												"logoutdietician"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Jul 2025 02:42:48 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=n450phK02E9nd9MiYXvCiP897%2F87DGtUWjmAOUjFkOQ%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1752460968\"}],\"max_age\":3600}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=\"https://nel.heroku.com/reports?s=n450phK02E9nd9MiYXvCiP897%2F87DGtUWjmAOUjFkOQ%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1752460968\""
										},
										{
											"key": "Server",
											"value": "Heroku"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Via",
											"value": "1.1 heroku-router"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										}
									],
									"cookie": [],
									"body": "Logout successful"
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{adminToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commonTests = {\r",
					"    validGetPutRequest: function () {\r",
					"        //Status code\r",
					"        pm.test(\"Status code is 200\", () => {\r",
					"            pm.response.to.have.status(200);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name hs string\", () => {\r",
					"            pm.response.to.have.status(\"OK\");\r",
					"        });\r",
					"\r",
					"        //Header \r",
					"        pm.test(\"Content-Type is present\", () => {\r",
					"            pm.response.to.have.header(\"Content-Type\");\r",
					"        });\r",
					"\r",
					"        pm.test(\"Content-Type header is application/json\", () => {\r",
					"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
					"        });\r",
					"\r",
					"        //Response time\r",
					"        pm.test(\"Response time is less than 1000ms\", () => {\r",
					"            pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"        });\r",
					"    },\r",
					"    unauthorizedRequest: function () {\r",
					"        //Unauthorized\r",
					"        pm.test(\"Status code is 401\", () => {\r",
					"            pm.response.to.have.status(401);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Unauthorized\");\r",
					"        });\r",
					"    },\r",
					"    notFoundRequest: function () {\r",
					"        //Invalid URL \r",
					"        pm.test(\"Status code is 404\", () => {\r",
					"            pm.response.to.have.status(404);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Not Found\");\r",
					"        });\r",
					"    },\r",
					"    invalidInputsRequest: function () {\r",
					"        //Unauthorized\r",
					"        pm.test(\"Status code is 400\", () => {\r",
					"            pm.response.to.have.status(400);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Bad Request\");\r",
					"        });\r",
					"    },\r",
					"    loginSchemaValidation:function(){\r",
					"    // Add a test to check for response schema validation\r",
					"pm.test(\"Response schema is valid\", function () {\r",
					"  var schema = {\r",
					"    type: \"object\",\r",
					"    properties: {\r",
					"      token: { type: \"string\" },\r",
					"      type: { type: \"string\" },\r",
					"      userId: { type: \"number\" },\r",
					"      loginUserEmail: { type: \"string\" },\r",
					"      roles: { type: \"array\" }\r",
					"    },\r",
					"    required: [\"token\", \"type\", \"userId\", \"loginUserEmail\", \"roles\"],\r",
					"  };\r",
					"\r",
					"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
					"});\r",
					"    },\r",
					"   \r",
					"\r",
					"       \r",
					"}\r",
					"\r",
					"try {\r",
					"    const jsonData = pm.response.json();\r",
					"    if (jsonData.token) {\r",
					"        pm.environment.set(\"adminToken\", jsonData.token);\r",
					"    }\r",
					"} catch (e) {\r",
					"    console.warn(\"Response body is not valid JSON or token is missing\");\r",
					"}\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		}
	]
}